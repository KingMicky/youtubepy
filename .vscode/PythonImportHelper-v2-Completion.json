[
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "Display",
        "importPath": "pyvirtualdisplay",
        "description": "pyvirtualdisplay",
        "isExtraImport": true,
        "detail": "pyvirtualdisplay",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "customtkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "customtkinter",
        "description": "customtkinter",
        "detail": "customtkinter",
        "documentation": {}
    },
    {
        "label": "YouTube",
        "importPath": "pytube",
        "description": "pytube",
        "isExtraImport": true,
        "detail": "pytube",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "setup_and_teardown",
        "kind": 2,
        "importPath": "gui_test",
        "description": "gui_test",
        "peekOfCode": "def setup_and_teardown():\n    yield\ndef test_gui_functionality(setup_and_teardown):\n    with Display():\n        pyautogui.click(x=100, y=100, button=\"left\")\n        # Wait for the GUI to respond\n        time.sleep(2)\n        # Capture a screenshot\n        screenshot = pyautogui.screenshot()\n        # Verify something in the screenshot",
        "detail": "gui_test",
        "documentation": {}
    },
    {
        "label": "test_gui_functionality",
        "kind": 2,
        "importPath": "gui_test",
        "description": "gui_test",
        "peekOfCode": "def test_gui_functionality(setup_and_teardown):\n    with Display():\n        pyautogui.click(x=100, y=100, button=\"left\")\n        # Wait for the GUI to respond\n        time.sleep(2)\n        # Capture a screenshot\n        screenshot = pyautogui.screenshot()\n        # Verify something in the screenshot\n        assert verify_something(screenshot), \"GUI functionality test failed\"\n# Add more tests as needed",
        "detail": "gui_test",
        "documentation": {}
    },
    {
        "label": "verify_something",
        "kind": 2,
        "importPath": "gui_test",
        "description": "gui_test",
        "peekOfCode": "def verify_something(screenshot):\n    # Implement your verification logic here\n    # For example, check if a specific element is present in the screenshot\n    return True",
        "detail": "gui_test",
        "documentation": {}
    },
    {
        "label": "os.environ['PYAUTOGUI_NOSCREEN']",
        "kind": 5,
        "importPath": "gui_test",
        "description": "gui_test",
        "peekOfCode": "os.environ['PYAUTOGUI_NOSCREEN'] = '1'\n@pytest.fixture\ndef setup_and_teardown():\n    yield\ndef test_gui_functionality(setup_and_teardown):\n    with Display():\n        pyautogui.click(x=100, y=100, button=\"left\")\n        # Wait for the GUI to respond\n        time.sleep(2)\n        # Capture a screenshot",
        "detail": "gui_test",
        "documentation": {}
    },
    {
        "label": "startDownload",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def startDownload():\n    # Disable the download button to prevent multiple clicks\n    download.configure(state=tk.DISABLED)\n    # Start the download in a separate thread\n    download_thread = Thread(target=downloadInBackground)\n    download_thread.start()\ndef downloadInBackground():\n    try:\n        ytlink = link.get()\n        yt = YouTube(ytlink, on_progress_callback=on_progress)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "downloadInBackground",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def downloadInBackground():\n    try:\n        ytlink = link.get()\n        yt = YouTube(ytlink, on_progress_callback=on_progress)\n        video_stream = yt.streams.get_highest_resolution()\n        download_folder = r'C:\\Users\\kachi\\Documents\\Devs\\youtubepy'\n        video_stream.download(download_folder)\n        print(f'Download complete. Saved to: {download_folder}')\n        # Update the UI in the main thread\n        app.after(100, updateUI, yt.title, 'white', 'Downloaded')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "updateUI",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def updateUI(label_text, text_color, finish_text):\n    title.configure(text=label_text, text_color=text_color)\n    finishLabel.configure(text=finish_text)\ndef on_progress(stream, chunk, bytes_remaining):\n    total_size = stream.filesize\n    bytes_downloaded = total_size - bytes_remaining\n    percentage_of_completion = bytes_downloaded / total_size * 100\n    per = str(int(percentage_of_completion))\n    # Update progress in the main thread\n    app.after(100, updateProgressUI, per, float(percentage_of_completion) / 100)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "on_progress",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def on_progress(stream, chunk, bytes_remaining):\n    total_size = stream.filesize\n    bytes_downloaded = total_size - bytes_remaining\n    percentage_of_completion = bytes_downloaded / total_size * 100\n    per = str(int(percentage_of_completion))\n    # Update progress in the main thread\n    app.after(100, updateProgressUI, per, float(percentage_of_completion) / 100)\ndef updateProgressUI(percentage, progress):\n    pPerentage.configure(text=percentage + '%')\n    progressBar.set(progress)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "updateProgressUI",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def updateProgressUI(percentage, progress):\n    pPerentage.configure(text=percentage + '%')\n    progressBar.set(progress)\ncustomtkinter.set_appearance_mode('system')\ncustomtkinter.set_default_color_theme('green')\napp = customtkinter.CTk()\napp.geometry('720x480')\napp.title('YouTube Downloader')\ntitle = customtkinter.CTkLabel(app, text='Insert a Youtube Link', font=('Arial', 20))\ntitle.pack(padx=10, pady=10)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = customtkinter.CTk()\napp.geometry('720x480')\napp.title('YouTube Downloader')\ntitle = customtkinter.CTkLabel(app, text='Insert a Youtube Link', font=('Arial', 20))\ntitle.pack(padx=10, pady=10)\nvideo_url = tk.StringVar()\nlink = customtkinter.CTkEntry(app, width=350, height=40, textvariable=video_url)\nlink.pack(padx=10, pady=10)\nfinishLabel = customtkinter.CTkLabel(app, text=\"\")\nfinishLabel.pack()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "title = customtkinter.CTkLabel(app, text='Insert a Youtube Link', font=('Arial', 20))\ntitle.pack(padx=10, pady=10)\nvideo_url = tk.StringVar()\nlink = customtkinter.CTkEntry(app, width=350, height=40, textvariable=video_url)\nlink.pack(padx=10, pady=10)\nfinishLabel = customtkinter.CTkLabel(app, text=\"\")\nfinishLabel.pack()\npPerentage = customtkinter.CTkLabel(app, text=\"0%\")\npPerentage.pack()\nprogressBar = customtkinter.CTkProgressBar(app, width=400)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "video_url",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "video_url = tk.StringVar()\nlink = customtkinter.CTkEntry(app, width=350, height=40, textvariable=video_url)\nlink.pack(padx=10, pady=10)\nfinishLabel = customtkinter.CTkLabel(app, text=\"\")\nfinishLabel.pack()\npPerentage = customtkinter.CTkLabel(app, text=\"0%\")\npPerentage.pack()\nprogressBar = customtkinter.CTkProgressBar(app, width=400)\nprogressBar.set(0)\nprogressBar.pack(padx=10, pady=10)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "link",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "link = customtkinter.CTkEntry(app, width=350, height=40, textvariable=video_url)\nlink.pack(padx=10, pady=10)\nfinishLabel = customtkinter.CTkLabel(app, text=\"\")\nfinishLabel.pack()\npPerentage = customtkinter.CTkLabel(app, text=\"0%\")\npPerentage.pack()\nprogressBar = customtkinter.CTkProgressBar(app, width=400)\nprogressBar.set(0)\nprogressBar.pack(padx=10, pady=10)\ndownload = customtkinter.CTkButton(app, text='Download', command=startDownload)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "finishLabel",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "finishLabel = customtkinter.CTkLabel(app, text=\"\")\nfinishLabel.pack()\npPerentage = customtkinter.CTkLabel(app, text=\"0%\")\npPerentage.pack()\nprogressBar = customtkinter.CTkProgressBar(app, width=400)\nprogressBar.set(0)\nprogressBar.pack(padx=10, pady=10)\ndownload = customtkinter.CTkButton(app, text='Download', command=startDownload)\ndownload.pack(padx=10, pady=10)\napp.mainloop()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "pPerentage",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "pPerentage = customtkinter.CTkLabel(app, text=\"0%\")\npPerentage.pack()\nprogressBar = customtkinter.CTkProgressBar(app, width=400)\nprogressBar.set(0)\nprogressBar.pack(padx=10, pady=10)\ndownload = customtkinter.CTkButton(app, text='Download', command=startDownload)\ndownload.pack(padx=10, pady=10)\napp.mainloop()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "progressBar",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "progressBar = customtkinter.CTkProgressBar(app, width=400)\nprogressBar.set(0)\nprogressBar.pack(padx=10, pady=10)\ndownload = customtkinter.CTkButton(app, text='Download', command=startDownload)\ndownload.pack(padx=10, pady=10)\napp.mainloop()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "download",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "download = customtkinter.CTkButton(app, text='Download', command=startDownload)\ndownload.pack(padx=10, pady=10)\napp.mainloop()",
        "detail": "main",
        "documentation": {}
    }
]