[
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "customtkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "customtkinter",
        "description": "customtkinter",
        "detail": "customtkinter",
        "documentation": {}
    },
    {
        "label": "YouTube",
        "importPath": "pytube",
        "description": "pytube",
        "isExtraImport": true,
        "detail": "pytube",
        "documentation": {}
    },
    {
        "label": "YouTube",
        "importPath": "pytube",
        "description": "pytube",
        "isExtraImport": true,
        "detail": "pytube",
        "documentation": {}
    },
    {
        "label": "setup_and_teardown",
        "kind": 2,
        "importPath": "gui_test",
        "description": "gui_test",
        "peekOfCode": "def setup_and_teardown():\n    # Perform setup steps if needed\n    yield\n    # Perform teardown steps if needed\ndef test_gui_functionality(setup_and_teardown):\n    # Simulate GUI interactions using PyAutoGUI\n    # For example, click a button or input text into a field\n    pyautogui.click(x=100, y=100, button=\"left\")\n    # Wait for the GUI to respond\n    time.sleep(2)",
        "detail": "gui_test",
        "documentation": {}
    },
    {
        "label": "test_gui_functionality",
        "kind": 2,
        "importPath": "gui_test",
        "description": "gui_test",
        "peekOfCode": "def test_gui_functionality(setup_and_teardown):\n    # Simulate GUI interactions using PyAutoGUI\n    # For example, click a button or input text into a field\n    pyautogui.click(x=100, y=100, button=\"left\")\n    # Wait for the GUI to respond\n    time.sleep(2)\n    # Capture a screenshot\n    screenshot = pyautogui.screenshot()\n    # Verify something in the screenshot\n    assert verify_something(screenshot), \"GUI functionality test failed\"",
        "detail": "gui_test",
        "documentation": {}
    },
    {
        "label": "verify_something",
        "kind": 2,
        "importPath": "gui_test",
        "description": "gui_test",
        "peekOfCode": "def verify_something(screenshot):\n    # Implement your verification logic here\n    # For example, check if a specific element is present in the screenshot\n    return True",
        "detail": "gui_test",
        "documentation": {}
    },
    {
        "label": "startDownload",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def startDownload():\n    try:\n        ytlink = link.get() \n        yt = YouTube(ytlink)  \n        video_stream = yt.streams.get_highest_resolution()\n        download_folder = r'C:\\Users\\kachi\\Documents\\Devs\\youtubepy'\n        video_stream.download(download_folder)\n        print(f'Download complete. Saved to: {download_folder}')\n    except Exception as e:\n        print(f'An error occurred: {str(e)}')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "startDownload",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def startDownload():\n    try:\n        ytlink = link.get()  \n        yt = YouTube(ytlink)  \n        video_stream = yt.streams.get_highest_resolution()\n        download_folder = '../downloads'\n        video_stream.download(download_folder)\n        print(f'Download complete. Saved to: {download_folder}')\n    except Exception as e:\n        print(f'An error occurred: {str(e)}')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = customtkinter.CTk()\napp.geometry('720x480')\napp.title('YouTube Downloader')\ntitle = customtkinter.CTkLabel(app, text='Insert a Youtube Link', font=('Arial', 20))\ntitle.pack(padx=10, pady=10)\nvideo_url = tk.StringVar()\nlink = customtkinter.CTkEntry(app, width=350, height=40, textvariable=video_url)\nlink.pack(padx=10, pady=10)\ndownload = customtkinter.CTkButton(app, text='Download', command=startDownload)\ndownload.pack()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "title = customtkinter.CTkLabel(app, text='Insert a Youtube Link', font=('Arial', 20))\ntitle.pack(padx=10, pady=10)\nvideo_url = tk.StringVar()\nlink = customtkinter.CTkEntry(app, width=350, height=40, textvariable=video_url)\nlink.pack(padx=10, pady=10)\ndownload = customtkinter.CTkButton(app, text='Download', command=startDownload)\ndownload.pack()\napp.mainloop()\nimport tkinter as tk\nimport customtkinter",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "video_url",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "video_url = tk.StringVar()\nlink = customtkinter.CTkEntry(app, width=350, height=40, textvariable=video_url)\nlink.pack(padx=10, pady=10)\ndownload = customtkinter.CTkButton(app, text='Download', command=startDownload)\ndownload.pack()\napp.mainloop()\nimport tkinter as tk\nimport customtkinter\nfrom pytube import YouTube\ndef startDownload():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "link",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "link = customtkinter.CTkEntry(app, width=350, height=40, textvariable=video_url)\nlink.pack(padx=10, pady=10)\ndownload = customtkinter.CTkButton(app, text='Download', command=startDownload)\ndownload.pack()\napp.mainloop()\nimport tkinter as tk\nimport customtkinter\nfrom pytube import YouTube\ndef startDownload():\n    try:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "download",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "download = customtkinter.CTkButton(app, text='Download', command=startDownload)\ndownload.pack()\napp.mainloop()\nimport tkinter as tk\nimport customtkinter\nfrom pytube import YouTube\ndef startDownload():\n    try:\n        ytlink = link.get()  \n        yt = YouTube(ytlink)  ",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = customtkinter.CTk()\napp.geometry('720x480')\napp.title('YouTube Downloader')\ntitle = customtkinter.CTkLabel(app, text='Insert a Youtube Link', font=('Arial', 20))\ntitle.pack(padx=10, pady=10)\nvideo_url = tk.StringVar()\nlink = customtkinter.CTkEntry(app, width=350, height=40, textvariable=video_url)\nlink.pack(padx=10, pady=10)\ndownload = customtkinter.CTkButton(app, text='Download', command=startDownload)\ndownload.pack()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "title = customtkinter.CTkLabel(app, text='Insert a Youtube Link', font=('Arial', 20))\ntitle.pack(padx=10, pady=10)\nvideo_url = tk.StringVar()\nlink = customtkinter.CTkEntry(app, width=350, height=40, textvariable=video_url)\nlink.pack(padx=10, pady=10)\ndownload = customtkinter.CTkButton(app, text='Download', command=startDownload)\ndownload.pack()\napp.mainloop()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "video_url",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "video_url = tk.StringVar()\nlink = customtkinter.CTkEntry(app, width=350, height=40, textvariable=video_url)\nlink.pack(padx=10, pady=10)\ndownload = customtkinter.CTkButton(app, text='Download', command=startDownload)\ndownload.pack()\napp.mainloop()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "link",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "link = customtkinter.CTkEntry(app, width=350, height=40, textvariable=video_url)\nlink.pack(padx=10, pady=10)\ndownload = customtkinter.CTkButton(app, text='Download', command=startDownload)\ndownload.pack()\napp.mainloop()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "download",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "download = customtkinter.CTkButton(app, text='Download', command=startDownload)\ndownload.pack()\napp.mainloop()",
        "detail": "main",
        "documentation": {}
    }
]